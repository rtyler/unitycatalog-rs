/*
 * Unity Catalog API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ColumnTypeName : Name of type (INT, STRUCT, MAP, etc.).
/// Name of type (INT, STRUCT, MAP, etc.).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ColumnTypeName {
    #[serde(rename = "BOOLEAN")]
    Boolean,
    #[serde(rename = "BYTE")]
    Byte,
    #[serde(rename = "SHORT")]
    Short,
    #[serde(rename = "INT")]
    Int,
    #[serde(rename = "LONG")]
    Long,
    #[serde(rename = "FLOAT")]
    Float,
    #[serde(rename = "DOUBLE")]
    Double,
    #[serde(rename = "DATE")]
    Date,
    #[serde(rename = "TIMESTAMP")]
    Timestamp,
    #[serde(rename = "TIMESTAMP_NTZ")]
    TimestampNtz,
    #[serde(rename = "STRING")]
    String,
    #[serde(rename = "BINARY")]
    Binary,
    #[serde(rename = "DECIMAL")]
    Decimal,
    #[serde(rename = "INTERVAL")]
    Interval,
    #[serde(rename = "ARRAY")]
    Array,
    #[serde(rename = "STRUCT")]
    Struct,
    #[serde(rename = "MAP")]
    Map,
    #[serde(rename = "CHAR")]
    Char,
    #[serde(rename = "NULL")]
    Null,
    #[serde(rename = "USER_DEFINED_TYPE")]
    UserDefinedType,
    #[serde(rename = "TABLE_TYPE")]
    TableType,

}

impl std::fmt::Display for ColumnTypeName {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Boolean => write!(f, "BOOLEAN"),
            Self::Byte => write!(f, "BYTE"),
            Self::Short => write!(f, "SHORT"),
            Self::Int => write!(f, "INT"),
            Self::Long => write!(f, "LONG"),
            Self::Float => write!(f, "FLOAT"),
            Self::Double => write!(f, "DOUBLE"),
            Self::Date => write!(f, "DATE"),
            Self::Timestamp => write!(f, "TIMESTAMP"),
            Self::TimestampNtz => write!(f, "TIMESTAMP_NTZ"),
            Self::String => write!(f, "STRING"),
            Self::Binary => write!(f, "BINARY"),
            Self::Decimal => write!(f, "DECIMAL"),
            Self::Interval => write!(f, "INTERVAL"),
            Self::Array => write!(f, "ARRAY"),
            Self::Struct => write!(f, "STRUCT"),
            Self::Map => write!(f, "MAP"),
            Self::Char => write!(f, "CHAR"),
            Self::Null => write!(f, "NULL"),
            Self::UserDefinedType => write!(f, "USER_DEFINED_TYPE"),
            Self::TableType => write!(f, "TABLE_TYPE"),
        }
    }
}

impl Default for ColumnTypeName {
    fn default() -> ColumnTypeName {
        Self::Boolean
    }
}

